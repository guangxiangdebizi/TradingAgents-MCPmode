#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
JSON to DOCX Converter
‰∏ìÈó®‰∏∫dumpÊñá‰ª∂Â§π‰∏ãÁöÑJSONÊñáÊ°£ÂØºÂá∫‰∏∫DOCXÁöÑÂ∑•ÂÖ∑
"""

import json
import os
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, List, Optional

try:
    from docx import Document
    from docx.shared import Inches, Pt
    from docx.enum.text import WD_ALIGN_PARAGRAPH
    from docx.enum.style import WD_STYLE_TYPE
    from docx.oxml.shared import OxmlElement, qn
    PYTHON_DOCX_AVAILABLE = True
except ImportError:
    PYTHON_DOCX_AVAILABLE = False
    print("‚ö†Ô∏è python-docxÊú™ÂÆâË£ÖÔºåDOCXÂØºÂá∫ÂäüËÉΩ‰∏çÂèØÁî®")
    print("üì¶ ËØ∑ÂÆâË£Ö: pip install python-docx")


class JSONToDocxConverter:
    """JSONËΩ¨DOCXËΩ¨Êç¢Âô®"""
    
    def __init__(self, dump_dir: str = "src/dump"):
        """ÂàùÂßãÂåñËΩ¨Êç¢Âô®
        
        Args:
            dump_dir: dumpÊñá‰ª∂Â§πË∑ØÂæÑ
        """
        if not PYTHON_DOCX_AVAILABLE:
            raise ImportError("python-docxÊú™ÂÆâË£ÖÔºåËØ∑ÂÖàÂÆâË£ÖÁõ∏ÂÖ≥‰æùËµñ")
            
        self.dump_dir = Path(dump_dir)
        self.output_dir = Path("docx_reports")
        
        # Á°Æ‰øùËæìÂá∫ÁõÆÂΩïÂ≠òÂú®
        self.output_dir.mkdir(exist_ok=True)
    
    def _setup_document_styles(self, doc: Document):
        """ËÆæÁΩÆÊñáÊ°£Ê†∑Âºè"""
        try:
            # ËÆæÁΩÆÈªòËÆ§Â≠ó‰Ωì
            style = doc.styles['Normal']
            font = style.font
            font.name = 'Microsoft YaHei'
            font.size = Pt(11)
            
            # ÂàõÂª∫Ê†áÈ¢òÊ†∑Âºè
            try:
                title_style = doc.styles.add_style('CustomTitle', WD_STYLE_TYPE.PARAGRAPH)
                title_font = title_style.font
                title_font.name = 'Microsoft YaHei'
                title_font.size = Pt(20)
                title_font.bold = True
                title_style.paragraph_format.alignment = WD_ALIGN_PARAGRAPH.CENTER
                title_style.paragraph_format.space_after = Pt(12)
            except:
                pass  # Ê†∑ÂºèÂèØËÉΩÂ∑≤Â≠òÂú®
            
            # ÂàõÂª∫Á´†ËäÇÊ†áÈ¢òÊ†∑Âºè
            try:
                heading1_style = doc.styles.add_style('CustomHeading1', WD_STYLE_TYPE.PARAGRAPH)
                heading1_font = heading1_style.font
                heading1_font.name = 'Microsoft YaHei'
                heading1_font.size = Pt(16)
                heading1_font.bold = True
                heading1_style.paragraph_format.space_after = Pt(12)
            except:
                pass
            
            # ÂàõÂª∫Â≠êÊ†áÈ¢òÊ†∑Âºè
            try:
                heading2_style = doc.styles.add_style('CustomHeading2', WD_STYLE_TYPE.PARAGRAPH)
                heading2_font = heading2_style.font
                heading2_font.name = 'Microsoft YaHei'
                heading2_font.size = Pt(14)
                heading2_font.bold = True
                heading2_style.paragraph_format.space_after = Pt(10)
            except:
                pass
            
            # ÂàõÂª∫‰ª£Á†ÅÊ†∑Âºè
            try:
                code_style = doc.styles.add_style('CustomCode', WD_STYLE_TYPE.PARAGRAPH)
                code_font = code_style.font
                code_font.name = 'Consolas'
                code_font.size = Pt(9)
                code_style.paragraph_format.left_indent = Inches(0.5)
                code_style.paragraph_format.space_after = Pt(6)
            except:
                pass
                
        except Exception as e:
            print(f"‚ö†Ô∏è ËÆæÁΩÆÊñáÊ°£Ê†∑ÂºèÊó∂Âá∫Èîô: {e}")
    
    def _add_emoji_support(self, paragraph, text: str):
        """Ê∑ªÂä†Ë°®ÊÉÖÁ¨¶Âè∑ÊîØÊåÅ"""
        try:
            run = paragraph.add_run(text)
            # ËÆæÁΩÆÂ≠ó‰Ωì‰ª•ÊîØÊåÅË°®ÊÉÖÁ¨¶Âè∑
            run.font.name = 'Segoe UI Emoji'
            return run
        except:
            # Â¶ÇÊûúÂ§±Ë¥•Ôºå‰ΩøÁî®ÈªòËÆ§Â≠ó‰Ωì
            return paragraph.add_run(text)
    
    def convert_json_to_docx(self, json_file_path: str) -> Optional[str]:
        """Â∞ÜJSONÊñá‰ª∂ËΩ¨Êç¢‰∏∫DOCX
        
        Args:
            json_file_path: JSONÊñá‰ª∂Ë∑ØÂæÑ
            
        Returns:
            ÁîüÊàêÁöÑDOCXÊñá‰ª∂Ë∑ØÂæÑÔºåÂ§±Ë¥•ËøîÂõûNone
        """
        try:
            # ËØªÂèñJSONÊñá‰ª∂
            with open(json_file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            # ÂàõÂª∫ÊñáÊ°£
            doc = Document()
            
            # ËÆæÁΩÆÊñáÊ°£Ê†∑Âºè
            self._setup_document_styles(doc)
            
            # ÁîüÊàêDOCXÂÜÖÂÆπ
            self._generate_docx_content(doc, data)
            
            # ÁîüÊàêËæìÂá∫Êñá‰ª∂Âêç
            json_filename = Path(json_file_path).stem
            output_file = self.output_dir / f"{json_filename}.docx"
            
            # ‰øùÂ≠òÊñáÊ°£
            doc.save(str(output_file))
            
            print(f"‚úÖ DOCXÊä•ÂëäÂ∑≤ÁîüÊàê: {output_file}")
            return str(output_file)
            
        except Exception as e:
            print(f"‚ùå DOCXËΩ¨Êç¢Â§±Ë¥•: {e}")
            return None
    
    def _generate_docx_content(self, doc: Document, data: Dict[str, Any]):
        """ÁîüÊàêDOCXÂÜÖÂÆπ"""
        # Ê†áÈ¢ò
        session_id = data.get('session_id', 'Unknown')
        title_paragraph = doc.add_paragraph()
        title_run = title_paragraph.add_run(f"‰∫§ÊòìÂàÜÊûêÊä•Âëä - {session_id}")
        title_run.font.name = 'Microsoft YaHei'
        title_run.font.size = Pt(20)
        title_run.bold = True
        title_paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        doc.add_paragraph()  # Á©∫Ë°å
        
        # Âü∫Êú¨‰ø°ÊÅØ
        heading = doc.add_paragraph()
        emoji_run = heading.add_run("üìã ")
        emoji_run.font.name = 'Segoe UI Emoji'
        text_run = heading.add_run("Âü∫Êú¨‰ø°ÊÅØ")
        text_run.font.name = 'Microsoft YaHei'
        text_run.font.size = Pt(16)
        text_run.bold = True
        
        basic_info = [
            f"‰ºöËØùID: {data.get('session_id', 'N/A')}",
            f"ÂàõÂª∫Êó∂Èó¥: {data.get('created_at', 'N/A')}",
            f"Êõ¥Êñ∞Êó∂Èó¥: {data.get('updated_at', 'N/A')}",
            f"Áä∂ÊÄÅ: {data.get('status', 'N/A')}"
        ]
        
        for info in basic_info:
            p = doc.add_paragraph()
            bullet_run = p.add_run("‚Ä¢ ")
            bullet_run.font.name = 'Microsoft YaHei'
            info_run = p.add_run(info)
            info_run.font.name = 'Microsoft YaHei'
        
        doc.add_paragraph()  # Á©∫Ë°å
        
        # Áî®Êà∑Êü•ËØ¢
        if 'user_query' in data and data['user_query']:
            heading = doc.add_paragraph()
            emoji_run = heading.add_run("üîç ")
            emoji_run.font.name = 'Segoe UI Emoji'
            text_run = heading.add_run("Áî®Êà∑Êü•ËØ¢")
            text_run.font.name = 'Microsoft YaHei'
            text_run.font.size = Pt(16)
            text_run.bold = True
            
            query_p = doc.add_paragraph()
            quote_run1 = query_p.add_run("‚ùù ")
            quote_run1.font.name = 'Segoe UI Emoji'
            query_run = query_p.add_run(data['user_query'])
            query_run.font.name = 'Microsoft YaHei'
            quote_run2 = query_p.add_run(" ‚ùû")
            quote_run2.font.name = 'Segoe UI Emoji'
            
            doc.add_paragraph()  # Á©∫Ë°å
        
        # Êô∫ËÉΩ‰ΩìÊâßË°åÊÉÖÂÜµ
        if 'agents' in data and data['agents']:
            heading = doc.add_paragraph()
            emoji_run = heading.add_run("ü§ñ ")
            emoji_run.font.name = 'Segoe UI Emoji'
            text_run = heading.add_run("Êô∫ËÉΩ‰ΩìÊâßË°åÊÉÖÂÜµ")
            text_run.font.name = 'Microsoft YaHei'
            text_run.font.size = Pt(16)
            text_run.bold = True
            
            for agent in data['agents']:
                agent_name = agent.get('agent_name', 'Unknown Agent')
                
                # Êô∫ËÉΩ‰ΩìÂêçÁß∞
                agent_heading = doc.add_paragraph()
                agent_run = agent_heading.add_run(agent_name)
                agent_run.font.name = 'Microsoft YaHei'
                agent_run.font.size = Pt(14)
                agent_run.bold = True
                
                # Êô∫ËÉΩ‰Ωì‰ø°ÊÅØ
                agent_info = [
                    f"Áä∂ÊÄÅ: {agent.get('status', 'N/A')}",
                    f"ÂºÄÂßãÊó∂Èó¥: {agent.get('start_time', 'N/A')}",
                ]
                
                if agent.get('end_time'):
                    agent_info.append(f"ÁªìÊùüÊó∂Èó¥: {agent.get('end_time')}")
                
                agent_info.append(f"ÊâßË°åÁªìÊûú: {agent.get('result', 'N/A')}")
                
                for info in agent_info:
                    p = doc.add_paragraph()
                    bullet_run = p.add_run("‚Ä¢ ")
                    bullet_run.font.name = 'Microsoft YaHei'
                    info_run = p.add_run(info)
                    info_run.font.name = 'Microsoft YaHei'
                
                # ÊâßË°åÂÜÖÂÆπ
                if agent.get('action'):
                    action_heading = doc.add_paragraph()
                    action_title = action_heading.add_run("ÊâßË°åÂÜÖÂÆπ:")
                    action_title.font.name = 'Microsoft YaHei'
                    action_title.bold = True
                    
                    # Â∞ÜÈïøÊñáÊú¨ÂàÜÊÆµÂ§ÑÁêÜ
                    action_text = str(agent['action'])
                    if len(action_text) > 1000:
                        action_text = action_text[:1000] + "..."
                    
                    action_p = doc.add_paragraph()
                    action_run = action_p.add_run(action_text)
                    action_run.font.name = 'Consolas'
                    action_run.font.size = Pt(9)
                    action_p.paragraph_format.left_indent = Inches(0.5)
        
        # Èò∂ÊÆµ‰ø°ÊÅØ
        if 'stages' in data and data['stages']:
            heading = doc.add_paragraph()
            emoji_run = heading.add_run("üìä ")
            emoji_run.font.name = 'Segoe UI Emoji'
            text_run = heading.add_run("ÊâßË°åÈò∂ÊÆµ")
            text_run.font.name = 'Microsoft YaHei'
            text_run.font.size = Pt(16)
            text_run.bold = True
            
            for i, stage in enumerate(data['stages'], 1):
                stage_heading = doc.add_paragraph()
                stage_run = stage_heading.add_run(f"Èò∂ÊÆµ {i}")
                stage_run.font.name = 'Microsoft YaHei'
                stage_run.font.size = Pt(14)
                stage_run.bold = True
                
                stage_p = doc.add_paragraph()
                content_run = stage_p.add_run(f"ÂÜÖÂÆπ: {stage}")
                content_run.font.name = 'Microsoft YaHei'
        
        # MCPË∞ÉÁî®ÊÉÖÂÜµ
        if 'mcp_calls' in data and data['mcp_calls']:
            heading = doc.add_paragraph()
            emoji_run = heading.add_run("üîß ")
            emoji_run.font.name = 'Segoe UI Emoji'
            text_run = heading.add_run("MCPÂ∑•ÂÖ∑Ë∞ÉÁî®")
            text_run.font.name = 'Microsoft YaHei'
            text_run.font.size = Pt(16)
            text_run.bold = True
            
            for i, call in enumerate(data['mcp_calls'], 1):
                call_heading = doc.add_paragraph()
                call_run = call_heading.add_run(f"Ë∞ÉÁî® {i}")
                call_run.font.name = 'Microsoft YaHei'
                call_run.font.size = Pt(14)
                call_run.bold = True
                
                call_info = [
                    f"Â∑•ÂÖ∑: {call.get('tool', 'N/A')}",
                    f"Êó∂Èó¥: {call.get('timestamp', 'N/A')}"
                ]
                if call.get('result'):
                    call_info.append(f"ÁªìÊûú: {call['result']}")
                
                for info in call_info:
                    p = doc.add_paragraph()
                    bullet_run = p.add_run("‚Ä¢ ")
                    bullet_run.font.name = 'Microsoft YaHei'
                    info_run = p.add_run(info)
                    info_run.font.name = 'Microsoft YaHei'
        
        # ÈîôËØØ‰ø°ÊÅØ
        if 'errors' in data and data['errors']:
            heading = doc.add_paragraph()
            emoji_run = heading.add_run("‚ùå ")
            emoji_run.font.name = 'Segoe UI Emoji'
            text_run = heading.add_run("ÈîôËØØ‰ø°ÊÅØ")
            text_run.font.name = 'Microsoft YaHei'
            text_run.font.size = Pt(16)
            text_run.bold = True
            
            for error in data['errors']:
                p = doc.add_paragraph()
                bullet_run = p.add_run("‚Ä¢ ")
                bullet_run.font.name = 'Microsoft YaHei'
                error_run = p.add_run(error)
                error_run.font.name = 'Microsoft YaHei'
        
        # Ë≠¶Âëä‰ø°ÊÅØ
        if 'warnings' in data and data['warnings']:
            heading = doc.add_paragraph()
            emoji_run = heading.add_run("‚ö†Ô∏è ")
            emoji_run.font.name = 'Segoe UI Emoji'
            text_run = heading.add_run("Ë≠¶Âëä‰ø°ÊÅØ")
            text_run.font.name = 'Microsoft YaHei'
            text_run.font.size = Pt(16)
            text_run.bold = True
            
            for warning in data['warnings']:
                p = doc.add_paragraph()
                bullet_run = p.add_run("‚Ä¢ ")
                bullet_run.font.name = 'Microsoft YaHei'
                warning_run = p.add_run(warning)
                warning_run.font.name = 'Microsoft YaHei'
        
        # ÊúÄÁªàÁªìÊûú
        if 'final_results' in data and data['final_results']:
            heading = doc.add_paragraph()
            emoji_run = heading.add_run("üéØ ")
            emoji_run.font.name = 'Segoe UI Emoji'
            text_run = heading.add_run("ÊúÄÁªàÁªìÊûú")
            text_run.font.name = 'Microsoft YaHei'
            text_run.font.size = Pt(16)
            text_run.bold = True
            
            for key, value in data['final_results'].items():
                result_heading = doc.add_paragraph()
                result_run = result_heading.add_run(f"{key}")
                result_run.font.name = 'Microsoft YaHei'
                result_run.font.size = Pt(14)
                result_run.bold = True
                
                result_text = str(value)
                if len(result_text) > 1000:
                    result_text = result_text[:1000] + "..."
                
                result_p = doc.add_paragraph()
                result_content = result_p.add_run(result_text)
                result_content.font.name = 'Consolas'
                result_content.font.size = Pt(9)
                result_p.paragraph_format.left_indent = Inches(0.5)
        
        # ÂàÜÈöîÁ∫øÂíåÁîüÊàêÊó∂Èó¥Êà≥
        doc.add_paragraph()
        separator_p = doc.add_paragraph()
        separator_run = separator_p.add_run("‚îÄ" * 50)
        separator_run.font.name = 'Microsoft YaHei'
        
        timestamp_p = doc.add_paragraph()
        timestamp_run = timestamp_p.add_run(f"Êä•ÂëäÁîüÊàêÊó∂Èó¥: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        timestamp_run.font.name = 'Microsoft YaHei'
        timestamp_run.italic = True
    
    def convert_latest_json(self) -> Optional[str]:
        """ËΩ¨Êç¢ÊúÄÊñ∞ÁöÑJSONÊñá‰ª∂
        
        Returns:
            ÁîüÊàêÁöÑDOCXÊñá‰ª∂Ë∑ØÂæÑÔºåÂ§±Ë¥•ËøîÂõûNone
        """
        try:
            # Êü•ÊâædumpÁõÆÂΩï‰∏ãÁöÑÊâÄÊúâJSONÊñá‰ª∂
            json_files = list(self.dump_dir.glob("session_*.json"))
            
            if not json_files:
                print(f"‚ùå Âú® {self.dump_dir} ÁõÆÂΩï‰∏ãÊú™ÊâæÂà∞JSONÊñá‰ª∂")
                return None
            
            # ÊâæÂà∞ÊúÄÊñ∞ÁöÑÊñá‰ª∂
            latest_json = max(json_files, key=lambda f: f.stat().st_mtime)
            print(f"üìÑ ÊâæÂà∞ÊúÄÊñ∞ÁöÑJSONÊñá‰ª∂: {latest_json.name}")
            
            # ËΩ¨Êç¢‰∏∫DOCX
            return self.convert_json_to_docx(str(latest_json))
            
        except Exception as e:
            print(f"‚ùå DOCXËΩ¨Êç¢ËøáÁ®ã‰∏≠ÂèëÁîüÈîôËØØ: {e}")
            return None
    
    def convert_all_json(self) -> List[str]:
        """ËΩ¨Êç¢ÊâÄÊúâJSONÊñá‰ª∂
        
        Returns:
            ÁîüÊàêÁöÑDOCXÊñá‰ª∂Ë∑ØÂæÑÂàóË°®
        """
        try:
            # Êü•ÊâædumpÁõÆÂΩï‰∏ãÁöÑÊâÄÊúâJSONÊñá‰ª∂
            json_files = list(self.dump_dir.glob("session_*.json"))
            
            if not json_files:
                print(f"‚ùå Âú® {self.dump_dir} ÁõÆÂΩï‰∏ãÊú™ÊâæÂà∞JSONÊñá‰ª∂")
                return []
            
            results = []
            for json_file in json_files:
                print(f"üìÑ ËΩ¨Êç¢Êñá‰ª∂: {json_file.name}")
                result = self.convert_json_to_docx(str(json_file))
                if result:
                    results.append(result)
            
            return results
            
        except Exception as e:
            print(f"‚ùå DOCXÊâπÈáèËΩ¨Êç¢ËøáÁ®ã‰∏≠ÂèëÁîüÈîôËØØ: {e}")
            return []


def main():
    """‰∏ªÂáΩÊï∞ - ÂëΩ‰ª§Ë°åÂ∑•ÂÖ∑"""
    import argparse
    
    parser = argparse.ArgumentParser(
        description="JSON to DOCX Converter - Â∞ÜdumpÊñá‰ª∂Â§π‰∏ãÁöÑJSONÊñáÊ°£ËΩ¨Êç¢‰∏∫DOCX"
    )
    parser.add_argument("-f", "--file", help="ÊåáÂÆöË¶ÅËΩ¨Êç¢ÁöÑJSONÊñá‰ª∂Ë∑ØÂæÑ")
    parser.add_argument("-l", "--latest", action="store_true", help="ËΩ¨Êç¢ÊúÄÊñ∞ÁöÑJSONÊñá‰ª∂")
    parser.add_argument("-a", "--all", action="store_true", help="ËΩ¨Êç¢ÊâÄÊúâJSONÊñá‰ª∂")
    parser.add_argument("-d", "--dump-dir", default="src/dump", help="dumpÊñá‰ª∂Â§πË∑ØÂæÑ")
    
    args = parser.parse_args()
    
    try:
        converter = JSONToDocxConverter(args.dump_dir)
        
        if args.all:
            # ËΩ¨Êç¢ÊâÄÊúâÊñá‰ª∂
            results = converter.convert_all_json()
            if results:
                print(f"üéâ ÊâπÈáèËΩ¨Êç¢ÂÆåÊàêÔºåÂÖ±ÁîüÊàê {len(results)} ‰∏™DOCXÊñá‰ª∂")
            else:
                print("‚ùå ÊâπÈáèËΩ¨Êç¢Â§±Ë¥•")
        
        elif args.latest:
            # ËΩ¨Êç¢ÊúÄÊñ∞Êñá‰ª∂
            result = converter.convert_latest_json()
            if result:
                print(f"üéâ ËΩ¨Êç¢ÂÆåÊàê: {result}")
        
        elif args.file:
            # ËΩ¨Êç¢ÊåáÂÆöÊñá‰ª∂
            if os.path.exists(args.file):
                result = converter.convert_json_to_docx(args.file)
                if result:
                    print(f"üéâ ËΩ¨Êç¢ÂÆåÊàê: {result}")
            else:
                print(f"‚ùå Êñá‰ª∂‰∏çÂ≠òÂú®: {args.file}")
        
        else:
            # ÈªòËÆ§ËΩ¨Êç¢ÊúÄÊñ∞Êñá‰ª∂
            result = converter.convert_latest_json()
            if result:
                print(f"üéâ ËΩ¨Êç¢ÂÆåÊàê: {result}")
                
    except ImportError as e:
        print(f"‚ùå ‰æùËµñÁº∫Â§±: {e}")
        print("üì¶ ËØ∑ÂÆâË£ÖÂøÖË¶ÅÁöÑ‰æùËµñ:")
        print("   pip install python-docx")


if __name__ == "__main__":
    main()
